// [PackageDev] target_format: plist, ext: tmLanguage
{
    "fileTypes": [
        "nss"
    ], 
    "name": "Neverwinter Script", 
    "patterns": [
        {
            "include": "#comments"
        }, 
        {
            "match": "\\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\\b", 
            "name": "keyword.control.nss"
        }, 
        {
            "match": "\\b(action|effect|event|float|int|itemproperty|location|object|string|talent|vector|void)\\b", 
            "name": "storage.type.nss"
        }, 
        {
            "match": "\\b(const|static)\\b", 
            "name": "storage.modifier.nss"
        }, 
        {
            "match": "\\b(TRUE|FALSE|OBJECT_INVALID|OBJECT_SELF)\\b", 
            "name": "constant.language.nss"
        }, 
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b", 
            "name": "constant.numeric.nss"
        }, 
        {
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.nss"
                }
            }, 
            "end": "\"", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.nss"
                }
            }, 
            "name": "string.quoted.double.nss", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }, 
                {
                    "include": "#string_placeholder"
                }
            ]
        }, 
        {
            "begin": "^\\s*#\\s*(include)\\b\\s+", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.include"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.nss.include", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.nss"
                }, 
                {
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.nss"
                        }
                    }, 
                    "end": "\"", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.nss"
                        }
                    }, 
                    "name": "string.quoted.double.include.nss"
                }
            ]
        },
        {
            "begin": "^\\s*#\\s*(define)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.nss"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.nss", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.nss"
                }
            ]
        },
        {
            "begin": "(?x)\n(?:  ^\n|\n(?: (?= \\s ) (?<!else|new|return) (?<=\\w)\n| (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])\n)\n)\n(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n(\n(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |\n(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )\n)\n\\s*(?=\\()", 
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.function.leading.nss"
                }, 
                "3": {
                    "name": "entity.name.function.nss"
                }, 
                "4": {
                    "name": "punctuation.definition.parameters.nss"
                }
            }, 
            "end": "(?<=\\})|(?=#)|(;)", 
            "name": "meta.function.nss", 
            "patterns": [
                {
                    "include": "#comments"
                }, 
                {
                    "include": "#parens"
                }, 
                {
                    "match": "\\bconst\\b", 
                    "name": "storage.modifier.nss"
                }, 
                {
                    "include": "#block"
                }
            ]
        }
    ], 
    "repository": {
        "access": {
            "match": "\\.[a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\()", 
            "name": "variable.other.dot-access.nss"
        }, 
        "block": {
            "begin": "\\{", 
            "end": "\\}", 
            "name": "meta.block.nss", 
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        }, 
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.block.nss"
                        }
                    }, 
                    "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?", 
                    "name": "comment.block.nss"
                }, 
                {
                    "begin": "/\\*", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.nss"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.nss"
                }, 
                {
                    "match": "\\*/.*\\n", 
                    "name": "invalid.illegal.stray-comment-end.nss"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.line.nss"
                        }
                    }
                }, 
                {
                    "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?", 
                    "name": "comment.line.banner.nss"
                }, 
                {
                    "begin": "//", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.nss"
                        }
                    }, 
                    "end": "$\\n?", 
                    "name": "comment.line.double-slash.nss", 
                    "patterns": [
                        {
                            "match": "(?>\\\\\\s*\\n)", 
                            "name": "punctuation.separator.continuation.nss"
                        }
                    ]
                }
            ]
        }, 
        "parens": {
            "begin": "\\(", 
            "end": "\\)", 
            "name": "meta.parens.nss", 
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        },
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})", 
                    "name": "constant.character.escape.c"
                }, 
                {
                    "match": "\\\\.", 
                    "name": "invalid.illegal.unknown-escape.c"
                }
            ]
        }, 
        "string_placeholder": {
            "patterns": [
                {
                    "match": "(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t", 
                    "name": "constant.other.placeholder.c"
                }, 
                {
                    "match": "%", 
                    "name": "invalid.illegal.placeholder.c"
                }
            ]
        }
    }, 
    "scopeName": "source.nss", 
    "settings": [
        {
            "shellVariables": [
                {
                    "name": "TM_COMMENT_START", 
                    "value": "// "
                }, 
                {
                    "name": "TM_COMMENT_START_2", 
                    "value": "/*"
                }, 
                {
                    "name": "TM_COMMENT_END_2", 
                    "value": "*/"
                }, 
                {
                    "name": "TM_COMMENT_DISABLE_INDENT_2", 
                    "value": "yes"
                }
            ]
        }
    ], 
    "uuid": "7344aa21-6782-4ab6-93e7-6f6fb1c76d56"
}